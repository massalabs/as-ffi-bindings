var searchIndex = JSON.parse('{\
"as_ffi_bindings":{"doc":"The current module give a free access to an helper. With …","t":"PFFPFFGPKPFGKHMNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOMNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNMNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNN","n":["Any","AnyPtr","AnyPtrExported","Buffer","BufferPtr","Env","Error","Mem","Read","String","StringPtr","Type","Write","abort","alloc","alloc","alloc","alloc","as_error","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","content","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_array","empty_array","empty_array","export","fmt","fmt","fn_collect","fn_new","fn_pin","fn_unpin","free","free","free","free","from","from","from","from","from","from","from","from_array","from_array","from_array","from_c_struct","from_c_struct","from_c_struct","from_native","from_native","from_native","from_slice","from_slice","from_slice","id","import","init","init","init","init","init","init","init","init_with","into","into","into","into","into","into","into","into_array","into_array","into_array","into_c_struct","into_c_struct","into_c_struct","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","memory","new","new","new","offset","offset","offset","offset","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read","read","read","read","serialize","size","size","size","size","size","size","size","to_native","to_native","to_native","to_owned","to_owned","to_owned","to_owned","to_string","to_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","wasm_types","wasm_types","wasm_types","write","write","write","write","write_c_struct_to_ptr","write_c_struct_to_ptr","write_c_struct_to_ptr"],"q":[[0,"as_ffi_bindings"],[223,"wasmer::function_env"],[224,"wasmer::errors"],[225,"core::result"],[226,"alloc::boxed"],[227,"anyhow"],[228,"wasmer::store"],[229,"alloc::vec"],[230,"alloc::string"],[231,"core::error"],[232,"rkyv::with"],[233,"wasmer::externals::memory"],[234,"wasmer::store"],[235,"core::fmt"],[236,"core::array"],[237,"core::option"],[238,"wasmer::typed_function"],[239,"core::alloc::layout"],[240,"core::alloc::layout"],[241,"core::any"]],"d":["","","","","","","","","","","","","","","Try to write in the given environment a new value thanks …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unpin the pointer","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Create a new pointer with an allocation and write the …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Get ptr stored offset","","","","","","","","","","Read the value contained in the given memory at the …","","","","","Read the size as indicated in the AssemblyScript object …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to write in the given environment a value. If the size …","","","","","",""],"i":[29,0,0,29,0,0,0,24,0,29,0,0,0,0,8,14,15,3,24,21,29,14,15,1,3,24,21,29,14,15,1,3,24,14,15,1,3,14,15,1,3,21,1,21,29,14,15,1,3,24,21,29,14,15,1,3,24,21,21,29,14,15,1,3,24,21,29,14,15,1,3,24,14,15,3,14,24,24,1,1,1,1,8,14,15,3,21,29,14,15,1,3,24,14,15,3,14,15,3,14,15,3,14,15,3,21,14,21,29,14,15,1,3,24,1,21,29,14,15,1,3,24,14,15,3,14,15,3,21,29,14,15,1,3,24,1,14,15,3,29,14,15,3,21,29,14,15,1,3,24,35,14,15,3,21,35,14,14,15,15,3,3,14,15,3,14,15,1,3,24,14,21,29,14,15,1,3,24,21,29,14,15,1,3,24,21,29,14,15,1,3,24,21,29,14,15,1,3,24,21,29,14,15,1,3,24,21,29,14,15,1,3,24,14,15,3,8,14,15,3,14,15,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3,3,4,4],[[7,[5,6]]]],[[-1,1,-2],[[10,[[9,[8]]]]],[],11],[[[13,[12]],1,-1],[[10,[[9,[14]]]]],11],[[[13,[12]],1,-1],[[10,[[9,[15]]]]],11],[[16,1,-1],[[10,[[9,[3]]]]],11],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[15,15],[1,1],[3,3],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[],1],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[18,-1,[]],[[-1,-2],[[7,[[19,[-3,-4]]]]],[],[],[],[]],[[[20,[12]]],[[10,[21]]]],[[-1,-2],[[7,[[19,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[19,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[19,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[19,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[19,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[19,[-3,-4]]]]],[],[],[],[]],[18,5],[18,5],[18,5],[18,5],[18,5],[18,5],[18,5],[[]],[[]],[[]],[[14,22,23],[[10,[21]]]],[[24,25],26],[[24,25],26],0,0,0,0,[[8,1,23],[[10,[5]]]],[[14,1,23],[[10,[5]]]],[[15,1,23],[[10,[5]]]],[[3,1,23],[[10,[5]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,11,[]],[-1,-2,11,[]],[-1,-2,11,[]],[-1,-2,11,[]],[-1,-2,11,[]],[-1,-2,11,[]],[-1,14,[]],[-1,15,[]],[-1,3,[]],[[-1,[20,[27]]],[[7,[-2,28]]],11,[]],[[-1,[20,[27]]],[[7,[-2,28]]],11,[]],[[-1,[20,[27]]],[[7,[-2,28]]],11,[]],0,[[21,1,22,23],[[10,[29]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[1,[30,[22]],[30,[[32,[[5,[31,31]],31]]]],[30,[[32,[31,31]]]],[30,[[32,[31,5]]]],[30,[[32,[5,5]]]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[],[],11],[[-1,-2],[],[],11],[[-1,-2],[],[],11],[[-1,-2],[],[],11],[[-1,-2],[],[],11],[[-1,-2],[],[],11],[[],[[7,[33,34]]]],[[],[[7,[33,34]]]],[[],[[7,[33,34]]]],[[],[[7,[33,34]]]],[[],[[7,[33,34]]]],[[],[[7,[33,34]]]],[[],[[7,[33,34]]]],0,[4,14],[4,15],[4,3],[29,4],[14,4],[15,4],[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[35,22,-1],[[10,[-2]]],36,[]],[[14,22,-1],[[10,[[13,[12]]]]],36],[[15,22,-1],[[10,[[13,[12]]]]],36],[[3,22,-1],[[10,[16]]],36],[21,[[13,[12]]]],[[35,22,-1],[[10,[4]]],36],[[],4],[[14,22,-1],[[10,[4]]],36],[[],4],[[15,22,-1],[[10,[4]]],36],[[3,22,-1],[[10,[4]]],36],[[],4],[14,-1,[]],[15,-1,[]],[3,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[[14,22,23],[[10,[29]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[9,[-1]]],[[9,[38]]],[]],[[[9,[-1]]],[[9,[38]]],[]],[[[9,[-1]]],[[9,[38]]],[]],[[[9,[-1]]],[[9,[38]]],[]],[[[9,[-1]]],[[9,[38]]],[]],[[[9,[-1]]],[[9,[38]]],[]],[[[9,[-1]]],[[9,[38]]],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[[],[[20,[39]]]],[[],[[20,[39]]]],[[],[[20,[39]]]],[[8,-1,1,-2],[[10,[[9,[8]]]]],[],11],[[14,[13,[12]],1,-1],[[10,[[9,[14]]]]],11],[[15,[13,[12]],1,-1],[[10,[[9,[15]]]]],11],[[3,16,1,-1],[[10,[[9,[3]]]]],11],[27,5],[27,5],[27,5]],"c":[],"p":[[5,"Env",0],[5,"FunctionEnvMut",223],[5,"StringPtr",0],[1,"u32"],[1,"tuple"],[5,"RuntimeError",224],[6,"Result",225],[10,"Write",0],[5,"Box",226],[8,"Result",227],[10,"AsStoreMut",228],[1,"u8"],[5,"Vec",229],[5,"AnyPtr",0],[5,"BufferPtr",0],[5,"String",230],[10,"Error",231],[1,"usize"],[5,"With",232],[1,"slice"],[5,"AnyPtrExported",0],[5,"Memory",233],[5,"Store",228],[6,"Error",0],[5,"Formatter",234],[8,"Result",234],[20,"RawValue",235],[5,"TryFromSliceError",236],[6,"Type",0],[6,"Option",237],[1,"i32"],[5,"TypedFunction",238],[5,"Layout",239],[5,"LayoutError",239],[10,"Read",0],[10,"AsStoreRef",228],[5,"TypeId",240],[10,"Any",240],[6,"Type",241]],"b":[[76,"impl-Display-for-Error"],[77,"impl-Debug-for-Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
