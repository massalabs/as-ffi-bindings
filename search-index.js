var searchIndex = JSON.parse('{\
"as_ffi_bindings":{"doc":"The current module give a free access to an helper. With …","t":"NDDNDDENINDEIFKLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMKLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLL","n":["Any","AnyPtr","AnyPtrExported","Buffer","BufferPtr","Env","Error","Mem","Read","String","StringPtr","Type","Write","abort","alloc","alloc","alloc","alloc","as_error","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","content","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_array","empty_array","empty_array","export","fmt","fmt","fn_collect","fn_new","fn_pin","fn_unpin","free","free","free","free","from","from","from","from","from","from","from","from_array","from_array","from_array","from_c_struct","from_c_struct","from_c_struct","from_native","from_native","from_native","from_slice","from_slice","from_slice","id","import","init","init","init","init","init","init","init","init_with","into","into","into","into","into","into","into","into_array","into_array","into_array","into_c_struct","into_c_struct","into_c_struct","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","memory","new","new","new","offset","offset","offset","offset","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read","read","read","read","serialize","size","size","size","size","size","size","size","to_native","to_native","to_native","to_owned","to_owned","to_owned","to_owned","to_string","to_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","wasm_types","wasm_types","wasm_types","write","write","write","write","write_c_struct_to_ptr","write_c_struct_to_ptr","write_c_struct_to_ptr"],"q":[[0,"as_ffi_bindings"],[223,"wasmer::function_env"],[224,"wasmer::errors"],[225,"core::result"],[226,"alloc::boxed"],[227,"anyhow"],[228,"wasmer::store"],[229,"alloc::vec"],[230,"alloc::string"],[231,"core::error"],[232,"rkyv::with"],[233,"wasmer::externals::memory"],[234,"wasmer::store"],[235,"core::fmt"],[236,"core::array"],[237,"core::option"],[238,"wasmer::typed_function"],[239,"core::alloc::layout"],[240,"core::alloc::layout"],[241,"core::any"]],"d":["","","","","","","","","","","","","","","Try to write in the given environment a new value thanks …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unpin the pointer","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Create a new pointer with an allocation and write the …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Get ptr stored offset","","","","","","","","","","Read the value contained in the given memory at the …","","","","","Read the size as indicated in the AssemblyScript object …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to write in the given environment a value. If the size …","","","","","",""],"i":[28,0,0,28,0,0,0,23,0,28,0,0,0,0,38,13,14,3,23,19,28,13,14,1,3,23,19,28,13,14,1,3,23,13,14,1,3,13,14,1,3,19,1,19,28,13,14,1,3,23,19,28,13,14,1,3,23,19,19,28,13,14,1,3,23,19,28,13,14,1,3,23,13,14,3,13,23,23,1,1,1,1,38,13,14,3,19,28,13,14,1,3,23,13,14,3,13,14,3,13,14,3,13,14,3,19,13,19,28,13,14,1,3,23,1,19,28,13,14,1,3,23,13,14,3,13,14,3,19,28,13,14,1,3,23,1,13,14,3,28,13,14,3,19,28,13,14,1,3,23,39,13,14,3,19,39,13,13,14,14,3,3,13,14,3,13,14,1,3,23,13,19,28,13,14,1,3,23,19,28,13,14,1,3,23,19,28,13,14,1,3,23,19,28,13,14,1,3,23,19,28,13,14,1,3,23,19,28,13,14,1,3,23,13,14,3,38,13,14,3,13,14,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3,3,4,4],[[7,[5,6]]]],[[-1,1,-2],[[9,[[8,[-3]]]]],[],10,[]],[[[12,[11]],1,-1],[[9,[[8,[13]]]]],10],[[[12,[11]],1,-1],[[9,[[8,[14]]]]],10],[[15,1,-1],[[9,[[8,[3]]]]],10],[-1,16,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[14,14],[1,1],[3,3],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[],1],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[17,-1,[]],[[[18,[11]]],[[9,[19]]]],[[-1,-2],[[7,[[20,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[20,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[20,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[20,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[20,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[20,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[20,[-3,-4]]]]],[],[],[],[]],[17,5],[17,5],[17,5],[17,5],[17,5],[17,5],[17,5],[[]],[[]],[[]],[[13,21,22],[[9,[19]]]],[[23,24],25],[[23,24],25],0,0,0,0,[[-1,1,22],[[9,[5]]],[]],[[13,1,22],[[9,[5]]]],[[14,1,22],[[9,[5]]]],[[3,1,22],[[9,[5]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,10,[]],[-1,-2,10,[]],[-1,-2,10,[]],[-1,-2,10,[]],[-1,-2,10,[]],[-1,-2,10,[]],[[],13],[[],14],[[],3],[[-1,[18,[26]]],[[7,[-2,27]]],10,[]],[[-1,[18,[26]]],[[7,[-2,27]]],10,[]],[[-1,[18,[26]]],[[7,[-2,27]]],10,[]],0,[[19,1,21,22],[[9,[28]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[1,[29,[21]],[29,[[31,[[5,[30,30]],30]]]],[29,[[31,[30,30]]]],[29,[[31,[30,5]]]],[29,[[31,[5,5]]]]],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[],[],10],[[-1,-2],[],[],10],[[-1,-2],[],[],10],[[-1,-2],[],[],10],[[-1,-2],[],[],10],[[-1,-2],[],[],10],[[],[[7,[32,33]]]],[[],[[7,[32,33]]]],[[],[[7,[32,33]]]],[[],[[7,[32,33]]]],[[],[[7,[32,33]]]],[[],[[7,[32,33]]]],[[],[[7,[32,33]]]],0,[4,13],[4,14],[4,3],[28,4],[13,4],[14,4],[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[-1,21,-2],[[9,[-3]]],[],34,[]],[[13,21,-1],[[9,[[12,[11]]]]],34],[[14,21,-1],[[9,[[12,[11]]]]],34],[[3,21,-1],[[9,[15]]],34],[19,[[12,[11]]]],[[-1,21,-2],[[9,[4]]],[],34],[[],4],[[13,21,-1],[[9,[4]]],34],[[14,21,-1],[[9,[4]]],34],[[],4],[[3,21,-1],[[9,[4]]],34],[[],4],[13],[14],[3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[[13,21,22],[[9,[28]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[[[8,[-1]]],[[8,[36]]],[]],[[[8,[-1]]],[[8,[36]]],[]],[[[8,[-1]]],[[8,[36]]],[]],[[[8,[-1]]],[[8,[36]]],[]],[[[8,[-1]]],[[8,[36]]],[]],[[[8,[-1]]],[[8,[36]]],[]],[[[8,[-1]]],[[8,[36]]],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[[],[[18,[37]]]],[[],[[18,[37]]]],[[],[[18,[37]]]],[[-1,-2,1,-3],[[9,[[8,[-1]]]]],[],[],10],[[13,[12,[11]],1,-1],[[9,[[8,[13]]]]],10],[[14,[12,[11]],1,-1],[[9,[[8,[14]]]]],10],[[3,15,1,-1],[[9,[[8,[3]]]]],10],[26,5],[26,5],[26,5]],"c":[],"p":[[3,"Env",0],[3,"FunctionEnvMut",223],[3,"StringPtr",0],[15,"u32"],[15,"tuple"],[3,"RuntimeError",224],[4,"Result",225],[3,"Box",226],[6,"Result",227],[8,"AsStoreMut",228],[15,"u8"],[3,"Vec",229],[3,"AnyPtr",0],[3,"BufferPtr",0],[3,"String",230],[8,"Error",231],[15,"usize"],[15,"slice"],[3,"AnyPtrExported",0],[3,"With",232],[3,"Memory",233],[3,"Store",228],[4,"Error",0],[3,"Formatter",234],[6,"Result",234],[19,"RawValue",235],[3,"TryFromSliceError",236],[4,"Type",0],[4,"Option",237],[15,"i32"],[3,"TypedFunction",238],[3,"Layout",239],[3,"LayoutError",239],[8,"AsStoreRef",228],[3,"TypeId",240],[8,"Any",240],[4,"Type",241],[8,"Write",0],[8,"Read",0]],"b":[[76,"impl-Display-for-Error"],[77,"impl-Debug-for-Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
